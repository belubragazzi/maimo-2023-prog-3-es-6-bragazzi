/*
1) Const y Let (Block Scope)
2) Arrow Functions
3) Modules (Imports and Exports)
4) Template Literals
5) Classes (Constructor, Super, Setters and Getters)
6) Default Parameters
7) The Spread Operator
8) Destructuring
9) Rest Operator
10) map(), filter(), reduce() 
11) Promesas, Async/Await
*/

console.log("Hello World");
/* arrowFunctions */

function calcDate(date) {
  return (date = 2);
}

const multi = calcDate(123);

/* La de arriba, la version normal. La de abajo, la de flecha. */

console.log(multi);

const calcSum = (val) => {
  return (val = 3);
};

const calcSumShort = (val) => val + 3;

/* arrowFunctions */

/* Template Literals */

const nombreCompleto = (nombre, edad) => {
  return "Soy " + nombre + " y tengo " + edad;
};

nombreCompleto("Agus", 37);

/* el de arriba, la forma antigua. Lo de abajo, es la piola */

const nombreCompleto2 = (nombre, edad) => {
  return `Soy ${nombre} y tengo ${edad}`;
};

nombreCompleto2("Agus", 37);

console.log(nombreCompleto2);

/* Template Literals */
const markup = `
<div class="wrapper">
<h2>Subtitulo</h2>
</div>`;

const parser = new DOMParser();
const htmlObject = parser.parseFromString(markup, "text/html").body.firstChild;
const container = document.querySelector('.container');

container.append(htmlObject)


//3) Modules (imports and exports)
import colors from './colors.js';
console.log(colors);
import actores, { peliculasCopadas, cantidadPeliculas } from 'libreriaAmiga.js';

console.log(peliculasCopadas, cantidadPeliculas(peliculasCopadas), actores)



console.log("hello world");



/*
1) Const y Let (Block Scope)
2) Arrow Functions
3) Modules (Imports and Exports)
4) Template Literals
5) Classes (Constructor, Super, Setters and Getters)
6) Default Parameters
7) The Spread Operator
8) Destructuring
9) Rest Operator
10) map(), filter(), reduce() 
11) Promesas, Async/Await
*/
/* shift + alt + a = comenta*/

/* 
1) Const y Let (Block Scope) */


// var es global, la sube a la parte de arriba
// Let(local al bloque) y const --> variables que estan adentro de un bloque de codigo (cuaquier q sea cerrado {}menos un objeto)
//desde ahora todo const raarmente let, var NO
//DIEMPRE HACER FORMAT DOCUMENT PARA QUE AGREGUE PUNTO Y COMA


//2) Arrow Functions
function name(date) {
    console.log(date)
}

const calcSum = (val) => {
    return val *3
}

const cacaltsum = val => val*3;//si es un solo valor

//4) Template Literals

const nombreCompleto = (nombre, edad) => {
    //return "Soy " + nombre + " y tengo " + edad; 
    return `Soy ${nombre} y tengo ${edad}` //altgr } -> ``
}
nombreCompleto ('belen', 22);


const markup = `
<div class="wrapper">
<h2>Subtitulo</h2>
</div>`;

const parser = new DOMParser();
const htmlObject = parser.parseFromString(markup, "text/html").body.firstChild;
const container = document.querySelector('.container');

container.append(htmlObject)



//1) Const y Let (Block Scope)*********************
var miVar= 5;
let miVar2= 5;

if (true) {
  miVar = 10;
  miVar2= 10;
}
//console.log(miVar);
//console.log(miVar2);

/* 
Var -> variables son globales, la sube a la parte de arriba del archivo
Let (local al bloque) y const --> variables que estan adentro de un 
bloque de codigo (cuaquier q sea cerrado {}menos un objeto)

///////////// siempre vamos a usar const /////////////
let se utilizara para loops en donde debo agregar info
*/

const endDate='2023';

//2) Arrow functions --> funcion flecha******************************
/* Si usamos un solo parametro no hace falta los parentesis */
function calcDate(date) {
    return date * 2;
}

const multi = calcDate(123);

console.log(multi);

const calcSum = (val) => {
    const valTemp = val*3
    return valTemp * 3;
}

const calcSumShort = val => val * 3;

/*Si vamos a usar una funcion de una sola linea no hace falta el return*/


//4)  Template Literals -> `  comilla francesa ***********************************

const nombreCompleto = (nombre, edad) => {
    // return "Soy " + nombre + " y tengo " + edad; 
    return `Soy ${nombre}, tengo ${edad} años`
}

const nombreCom = nombreCompleto("Belen", 22);
console.log(nombreCom);


const markup = `
<div class="wrapper">
<h2>Subtitulo</h2>
</div>`; //se ouede poner un $ al nombre de la const para saber q es html

const parser = new DOMParser();
const htmlObject = parser.parseFromString(markup, "text/html").body.firstChild;
const container = document.querySelector('.container');

//container.append(htmlObject)
container.innerHTML += markup;//opcion2 mejor

// 3) Modules (Imports and Exports) incluir un js en otro js

//import colors from './colors.js'

//import actores, { peliculasCopadas, cantidadPeliculas } from './libreriaAmiga.js';

console.log(peliculasCopadas, cantidadPeliculas(peliculasCopadas), actores);



const miAnime = peliculasCopadas[2].nombre;
const miAnimeOri = peliculasCopadas[2].origen;

console.log('mi anime', miAnime, miAnimeOri);
//alias --> cambia el nombre de un array
const {nombre: altoName, origen, anio} = peliculasCopadas[2];

console.log ('miamnime', altoName, origen, anio);


//Destructuring arrancar un dato objeto de un array
//permite traer el nombre de otra variable
/* crear const/

extraer posiciones de un array que necesite
*/
const numbers = [-100, -50, 4, 5, 6, 7]
const [pos1, pos2, pos3] = numbers;
console.log(pos1, pos2, pos3)

//6) Default Parameters

/*sirve para tener un valor por default */
const getAlumno = (nombre ='N/A', edad = 1000)




//7) The Spread Operator*************************************

const numNegativos = [-500, -300, -100];
const numPositivos = [100, 300, 500];

const todosLosNumeros = [...numNegativos,...numPositivos];
//juntalos dos arrays solo poniendo ... -> tres puntos (reemplaza al push)
console.log('todos', todosLosNumeros);


const paisEmpresa = {
  nombrePais: 'Argentina',
  monedaPais: 'Peso Argentino',
  fundacionPais: 1816,
};

const empresa = {
  nombreEmpresa: 'MaimoCorp',
  logoEmpresa: 'logo.svg',
};

const datosEmpresa = {...paisEmpresa,...empresa};
console.log('Empresa', datosEmpresa)


//9) Rest Operator 

const {nombrePais, ...institucional} = paisEmpresa;

const universidad = {
  name: 'Umai',
  website: 'https://multimedia.maimonides.edu',
  sedes: ['Caballito', 'Centro', 'Palermo'],
};
const { namer, website, ...locacion } = universidad;

console.log('la uni', namer, website, locacion)

//10) map(), filter(), find(), reduce() --> SOLO FUNCIONA PARA ARRAYS

/*son metodos que reccorren el array de manera automatica sin hacer un loop
produce una transformacion en cada eleento del array
devuelven otro array transformado en lo que necesites
map produce una transformacion de manera automática */
console.log(numPositivos)

const numPositivosDobles = numPositivos.map(numer =>{numer*2})
//callback cuando es un solo parametro es sin parentesis 
console.log(numPositivosDobles)

const numPositivosDoble = numPositivos.map(numer =>{
 return numer > 100 ? numer : numer*2;
}) //si o si return si es mas largo


//map()
const pelititle1 = peliculasCopadas.map(
  (pelicula) => `<h2>${nombre}</h2>` 
);


//filter() filtra por la condicion que vos quieras devuelve un nnuevo array con los resultados

const pelisUsa = peliculasCopadas.filter(({origen, anio})=>{origen ==='USA' || parseInt(anio) >= 1990
});

console.log(pelisUsa)

//ejemplos de como se pueden aplicar las cosas